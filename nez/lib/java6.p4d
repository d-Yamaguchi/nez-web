// PEG4d Java6 Grammar

File
	=  _ { PackageDeclaration? (@ImportDeclaration)* (@TypeDeclaration)* #Source } EOT

NAME
	= !KEYWORD LETTER W* _

LETTER
	= [a-z] / [A-Z] / [$_]
W
	= [a-z] / [A-Z] / [0-9] / [$_]
	
KEYWORD
	= ( 'abstract' / 'assert' / 'boolean' / 'break' / 'byte' / 'case' / 'catch' / 'char' / 'class' / 'const' / 'continue' / 'default' / 'double' / 'do' / 'else' / 'enum' / 'extends' / 'false' / 'finally' / 'final' / 'float' / 'for' / 'goto' / 'if' / 'implements' / 'import' / 'interface' / 'int' / 'instanceof' / 'long' / 'native' / 'new' / 'null' / 'package' / 'private' / 'protected' / 'public' / 'return' / 'short' / 'static' / 'strictfp' / 'super' / 'switch' / 'synchronized' / 'this' / 'throws' / 'throw' / 'transient' / 'true' / 'try' / 'void' / 'volatile' / 'while' ) !W

"assert"       = 'assert' !W _
"break"        = 'break' !W _
"case"         = 'case' !W _
"catch"        = 'catch' !W _
"class"        = 'class' !W _
"continue"     = 'continue' !W _
"default"      = 'default' !W _
"do"           = 'do' !W _
"else"         = 'else' !W _
"enum"         = 'enum' !W _
"extends"      = 'extends' !W _
"finally"      = 'finally' !W _
"final"        = 'final' !W _
"for"          = 'for' !W _
"if"           = 'if' !W _
"implements"   = 'implements' !W _
"import"       = 'import' !W _
"interface"    = 'interface' !W _
"instanceof"   = 'instanceof' !W _
"new"          = 'new' !W _
"package"      = 'package' !W _
"return"       = 'return' !W _
"static"       = 'static' !W _
"super"        = 'super' !W _
"switch"       = 'switch' !W _
"synchronized" = 'synchronized' !W _
"this"         = 'this' !W _
"throws"       = 'throws' !W _
"throw"        = 'throw' !W _
"try"          = 'try' !W _
"void"         = 'void' !W _
"while"        = 'while' !W _

"@"     = '@' _
"&"     = '&' ![&=] _
"&&"    = '&&' _
"&="    = '&=' _
"!"     = '!' !'=' _
">>>"   = '>>>' !'=' _
">>>="  = '>>>=' _
":"     = ':' _
","     = ',' _
"--"    = '--' _
"/"     = '/' !'=' _
"/="    = '/=' _
"."     = '.' _
"..."   = '...' _
"="     = '=' !'=' _
"=="    = '==' _
">="    = '>=' _
">"     = '>' ![=->] _
"^"     = '^' !'=' _
"^="    = '^=' _
"++"    = '++' _
"["     = '[' _
"<="    = '<=' _
"("     = '(' _
"<"     = '<' ![<-=] _
"{"     = '{' _
"-"     = '-' !'-' _
"-="    = '-=' _
"%"     = '%' !'=' _
"%="    = '%=' _
"!="    = '!=' _
"|"     = '|' ![=|] _
"|="    = '|=' _
"||"    = '||' _
"+"     = '+' ![+=] _
"+="    = '+=' _
"?"     = '?' _
"]"     = ']' _
")"     = ')' _
"}"     = '}' _
";"     = ';' _
"<<"    = '<<' !'=' _
"<<="   = '<<=' _
">>"    = '>>' ![=->] _
">>="   = '>>=' _
"*"     = '*' !'=' _
"*="    = '*=' _
"~"     = '~' _

EOT
	= !.




Annotation
	= { "@" @{ QNAME } ("(" (@ElementValue / AddElementValuePairs)? ")")? }

AddElementValuePairs
	= @ElementValuePair ("," @ElementValuePair)*

ElementValuePair
	= { @NAME "=" @ElementValue #keyValue }

ElementValueArrayInitializer
	= { "{" AddElementValues? ","? "}" #Array }

AddElementValues
	= @ElementValue ("," @ElementValue)*

ElementValue
	= ConditionalExpression / Annotation / ElementValueArrayInitializer

PackageDeclaration
	= Annotation* { "package" @{ QNAME #Name } #Package } ";"
	
ImportDeclaration
	= { "import" ("static" #StaticImport / #Import ) @{ QNAME ("." "*")? #Name } } ";"
	
TypeDeclaration
	= Modifier* ( ClassDeclaration / EnumDeclaration / InterfaceDeclaration / AnnotationTypeDeclaration ) / ";"

ClassDeclaration
	= { "class" @NAME (@TypeParameters)? ("extends" @ClassType )? ("implements" ClassTypeList)? @ClassBody }

ClassBody
	= { "{" (";" / @ClassBodyDeclaration)* "}" }

ClassBodyDeclaration
	= "static"? Block / Modifier* MemberDecl

MemberDecl
	= TypeParameters GenericMethodOrConstructorRest 
	/ Type NAME MethodDeclaratorRest 
	/ Type VariableDeclarators ";" 
	/ "void" NAME VoidMethodDeclaratorRest 
	/ NAME ConstructorDeclaratorRest 
	/ InterfaceDeclaration 
	/ ClassDeclaration 
	/ EnumDeclaration 
	/ AnnotationTypeDeclaration

GenericMethodOrConstructorRest
	= ( Type / "void" ) NAME MethodDeclaratorRest 
	/ NAME ConstructorDeclaratorRest

MethodDeclaratorRest
	= FormalParameters Dim* ("throws" ClassTypeList)? ( MethodBody / ";" )

VoidMethodDeclaratorRest
	= FormalParameters ("throws" ClassTypeList)? ( MethodBody / ";" )

ConstructorDeclaratorRest
	= FormalParameters ("throws" ClassTypeList)? MethodBody

MethodBody
	= Block

InterfaceDeclaration
	= "interface" NAME TypeParameters? ("extends" ClassTypeList)? InterfaceBody

InterfaceBody
	= "{" InterfaceBodyDeclaration* "}"

InterfaceBodyDeclaration
	= Modifier* InterfaceMemberDecl / ";"

InterfaceMemberDecl
	= InterfaceMethodOrFieldDecl 
	/ InterfaceGenericMethodDecl 
	/ "void" NAME VoidInterfaceMethodDeclaratorRest 
	/ InterfaceDeclaration 
	/ AnnotationTypeDeclaration 
	/ ClassDeclaration 
	/ EnumDeclaration

InterfaceMethodOrFieldDecl
	= Type NAME InterfaceMethodOrFieldRest

InterfaceMethodOrFieldRest
	= ConstantDeclaratorsRest ";" 
	/ InterfaceMethodDeclaratorRest

InterfaceMethodDeclaratorRest
	= FormalParameters Dim* ("throws" ClassTypeList)? ";"

InterfaceGenericMethodDecl
	= TypeParameters ( Type / "void" ) NAME InterfaceMethodDeclaratorRest

VoidInterfaceMethodDeclaratorRest
	= FormalParameters ("throws" ClassTypeList)? ";"

ConstantDeclaratorsRest
	= ConstantDeclaratorRest ("," ConstantDeclarator)*

ConstantDeclarator
	= NAME ConstantDeclaratorRest

ConstantDeclaratorRest
	= Dim* "=" VariableInitializer

EnumDeclaration
	= "enum" NAME ("implements" ClassTypeList)? EnumBody

EnumBody
	= "{" EnumConstants? ","? EnumBodyDeclarations? "}"

EnumConstants
	= EnumConstant ("," EnumConstant)*

EnumConstant
	= Annotation* NAME Arguments? ClassBody?

EnumBodyDeclarations
	= ";" ClassBodyDeclaration*
LocalVariableDeclarationStatement
	= ("final" / Annotation)* Type VariableDeclarators ";"
VariableDeclarators
	= VariableDeclarator ("," VariableDeclarator)*
VariableDeclarator
	= NAME Dim* ("=" VariableInitializer)?
FormalParameters
	= "(" FormalParameterList? ")"
FormalParameter
	= ("final" / Annotation)* Type VariableDeclaratorId
LastFormalParameter
	= ("final" / Annotation)* Type "..." VariableDeclaratorId
FormalParameterList
	= FormalParameter ("," FormalParameter)* ("," LastFormalParameter)? / LastFormalParameter
VariableDeclaratorId
	= NAME Dim*



Block
	= "{" BlockStatements "}"
BlockStatements
	= BlockStatement*
BlockStatement
	= LocalVariableDeclarationStatement 
	/ Modifier* ( ClassDeclaration / EnumDeclaration ) 
	/ Statement

Statement
	= Block 
	/ { "assert" @Expression (":" @Expression)? #Assert } ";" 
	/ {"if" ParExpression @Statement ("else" @Statement)? #If }
	/ {"for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement #For }
	/ {"for" "(" FormalParameter ":" Expression ")" Statement #ForEach }
	/ {"while" ParExpression Statement #While }
	/ {"do" Statement "while" ParExpression #DoWhile } ";"  
	/ {"try" Block ( Catch+ Finally? / Finally ) #Try }
	/ {"switch" ParExpression "{" SwitchBlockStatementGroups "}" #Switch }
	/ {"synchronized" ParExpression Block #Sync }  
	/ {"return" Expression? #Return } ";" 
	/ {"throw" Expression #Throw } ";" 
	/ {"break" NAME? #Break } ";" 
	/ {"continue" NAME? #Continue} ";" 
	/ {";" #empty } 
	/ StatementExpression  ";" 
	/ {NAME ":" Statement }

Catch
	= { "catch" "(" FormalParameter ")" @Block #Catch }

Finally
	= { "finally" @Block #Finally }
	
SwitchBlockStatementGroups
	= SwitchBlockStatementGroup*
SwitchBlockStatementGroup
	= SwitchLabel BlockStatements
SwitchLabel
	= "case" ConstantExpression ":" / "case" EnumConstantName ":" / "default" ":"

ForInit
	= ("final" / Annotation)* Type VariableDeclarators / StatementExpression ("," StatementExpression)*

ForUpdate
	= StatementExpression ("," StatementExpression)*

EnumConstantName
	= NAME
StatementExpression
	= Expression
ConstantExpression
	= Expression
Expression
	= ConditionalExpression (AssignmentOperator ConditionalExpression)*
AssignmentOperator
	= "=" #assign / "+=" #selfassign / "-=" / "*=" / "/=" / "&=" / "|=" / "^=" / "%=" / "<<=" / ">>=" / ">>>="
ConditionalExpression
	= ConditionalOrExpression {@ "?" @Expression ":" @ConditionalOrExpression #trinary }*
ConditionalOrExpression
	= ConditionalAndExpression {@ "||" @ConditionalAndExpression #or }*
ConditionalAndExpression
	= InclusiveOrExpression {@ "&&" @InclusiveOrExpression #and }*
InclusiveOrExpression
	= ExclusiveOrExpression {@ "|" @ExclusiveOrExpression #bitor }*
ExclusiveOrExpression
	= AndExpression {@ "^" @AndExpression }*
AndExpression
	= EqualityExpression {@ "&" @EqualityExpression }*
EqualityExpression
	= RelationalExpression {@ ( "==" #eq / "!=" #neq ) @RelationalExpression }*
RelationalExpression
	= ShiftExpression {@ ( ( "<=" #lte / ">=" #gte / "<" #lt / ">" #gt ) @ShiftExpression / "instanceof" #instanceof @ReferenceType ) }*
ShiftExpression
	= AdditiveExpression {@ ( "<<" / ">>" / ">>>" ) @AdditiveExpression }*
AdditiveExpression
	= MultiplicativeExpression {@ ( "+" #add / "-" #sub ) MultiplicativeExpression }*
MultiplicativeExpression
	= UnaryExpression {@ ( "*" #mul / "/" #div / "%" #mod ) UnaryExpression }*
UnaryExpression
	= { PrefixOp @UnaryExpression } / { "(" @Type ")" @UnaryExpression #cast } / Primary {@ Selector }* {@ PostfixOp }*
Primary
	= ParExpression / NonWildcardTypeArguments ( ExplicitGenericInvocationSuffix / "this" Arguments ) / "this" Arguments? / "super" SuperSuffix / Literal / "new" Creator / QNAME NAMESuffix? / BasicType Dim* "." "class" / "void" "." "class"
NAMESuffix
	= "[" ( "]" Dim* "." "class" / Expression "]" ) / Arguments / "." ( "class" / ExplicitGenericInvocation / "this" / "super" Arguments / "new" NonWildcardTypeArguments? InnerCreator )
ExplicitGenericInvocation
	= NonWildcardTypeArguments ExplicitGenericInvocationSuffix
NonWildcardTypeArguments
	= "<" ReferenceType ("," ReferenceType)* ">"
ExplicitGenericInvocationSuffix
	= "super" SuperSuffix / NAME Arguments
PrefixOp
	= "++" #inc / "--" #dec / "!" #not / "~" #compl / "+" #plus / "-" #minus
PostfixOp
	= "++" #postinc / "--" #postdec
Selector
	= "." NAME Arguments? / "." ExplicitGenericInvocation / "." "this" / "." "super" SuperSuffix / "." "new" NonWildcardTypeArguments? InnerCreator / DimExpr
SuperSuffix
	= Arguments / "." NonWildcardTypeArguments? NAME Arguments?
BasicType
	= ( 'byte' / 'short' / 'char' / 'int' / 'long' / 'float' / 'double' / 'boolean' ) !W _
Arguments
	= "(" (@Expression ("," @Expression)*)? ")"
Creator
	= NonWildcardTypeArguments? CreatedName ClassCreatorRest / NonWildcardTypeArguments? ( ClassType / BasicType ) ArrayCreatorRest
CreatedName
	= NAME NonWildcardTypeArguments? ("." NAME NonWildcardTypeArguments?)*
InnerCreator
	= NAME ClassCreatorRest
ArrayCreatorRest
	= "[" ( "]" Dim* ArrayInitializer / Expression "]" DimExpr* Dim* )
ClassCreatorRest
	= Arguments ClassBody?
ArrayInitializer
	= "{" (VariableInitializer ("," VariableInitializer)*)? ","? "}"
VariableInitializer
	= ArrayInitializer / Expression
ParExpression
	= "(" Expression ")"
QNAME
	= NAME ("." NAME)*
Dim
	= "[" "]"
DimExpr
	= "[" Expression "]"
Type
	= ( BasicType / ClassType ) Dim*
ReferenceType
	= BasicType Dim+ / ClassType Dim*
ClassType
	= NAME TypeArguments? ("." NAME TypeArguments?)*
ClassTypeList
	= ClassType ("," ClassType)*
TypeArguments
	= "<" TypeArgument ("," TypeArgument)* ">"
TypeArgument
	= ReferenceType / "?" (( "extends" / "super" ) ReferenceType)?
TypeParameters
	= "<" TypeParameter ("," TypeParameter)* ">"
TypeParameter
	= NAME ("extends" Bound)?
Bound
	= ClassType ("&" ClassType)*

Modifier
	= Annotation / ( 'public' / 'protected' / 'private' / 'static' / 'abstract' / 'final' / 'native' / 'synchronized' / 'transient' / 'volatile' / 'strictfp' ) !W _

AnnotationTypeDeclaration
	= "@" "interface" NAME AnnotationTypeBody
AnnotationTypeBody
	= "{" AnnotationTypeElementDeclaration* "}"
AnnotationTypeElementDeclaration
	= Modifier* AnnotationTypeElementRest / ";"
AnnotationTypeElementRest
	= Type AnnotationMethodOrConstantRest ";" / ClassDeclaration / EnumDeclaration / InterfaceDeclaration / AnnotationTypeDeclaration
AnnotationMethodOrConstantRest
	= AnnotationMethodRest / AnnotationConstantRest
AnnotationMethodRest
	= NAME "(" ")" DefaultValue?
AnnotationConstantRest
	= VariableDeclarators
DefaultValue
	= "default" ElementValue

	
Literal
	= ( FloatLiteral / IntegerLiteral / CharLiteral / StringLiteral / { 'true' !W #true } / { 'false' !W #false } / { 'null' !W #null } ) _

IntegerLiteral
	= { ( HEXNUM / OCTAL / DECIMAL #Integer ) } [Ll]?
DECIMAL
	= '0' / [1-9] [0-9]*
HEXNUM
	= '0' [Xx] HEX+
HEX
	= [a-fA-F0-9]
OCTAL
	= '0' [0-7]+

FloatLiteral
	= { (HexFloat / FLOAT) #float }
FLOAT
	= DIGIT+ '.' DIGIT* Exponent? [DFdf]? / '.' DIGIT+ Exponent? [DFdf]? / DIGIT+ Exponent [DFdf]? / DIGIT+ Exponent? [DFdf]
Exponent
	= [Ee] []? DIGIT+
DIGIT
	= [0-9]
HexFloat
	= HexSignificand BinaryExponent [DFdf]?
HexSignificand
	= ( '0x' / '0X' ) HEX* '.' HEX+ / HEXNUM '.'?
BinaryExponent
	= [Pp] []? DIGIT+

CharLiteral
	= { "'" ( Escape / ![\n\r'\\] . ) "'" #char }

StringLiteral
	= { '"' (Escape / ![\n\r"\\] .)* '"' #string }

Escape
	= '\\' ( ["'\\bfnrt] / OctalEscape / UnicodeEscape )

OctalEscape
	= [0-3] [0-7] [0-7] / [0-7] [0-7] / [0-7]

UnicodeEscape
	= 'u'+ HEX HEX HEX HEX


