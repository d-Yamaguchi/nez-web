// 
// MinCaml peg for peg4d
// 


// 1. elements

_
  = ( Comment / WS )*
  ;

WS    
  = [ \t\n\r]
  ;
  
Comment    
  = '(*' CommentBody* '*)'
  ;

CommentBody
  = Comment / ( !'(*' !'*)' . )
  ;

EOS
  = ';;'
  ;
  
NonZeroDigit
  = [1-9]
  ;

Digit
  = [0-9]
  ;

Lower
  = [a-z]
  ;

Upper
  = [A-Z]
  ;

Number
  = FloatNum
  / IntNum
  ;

IntNum
  = { '-'? NonZeroDigit Digit* #int }
  / { '0' #int }
  ;

FloatNum
  = { '-'? Digit* '.' Digit+ #float }
  ;

Identifier
  = !ReservedWord !Digit !Upper IdentifierName
  ;

IdentifierName
  = { Lower IdentifierPart* #identifier }
  ;

IdentifierPart
  = Lower / Upper / Digit / '_' 
  ;

ReservedWord
  = TrueToken / FalseToken / NotToken / BoolToken 
  / IntToken / FloatToken / IfToken / ThenToken / ElseToken 
  / LetToken / RecToken / InToken / EndToken 
  ;


// 2. keywords

TrueToken   = ( 'true'  / 'True'  / 'TRUE'  )  !IdentifierPart;
FalseToken  = ( 'false' / 'False' / 'FALSE' )  !IdentifierPart;
NotToken    = ( 'not'   / 'Not'   / 'NOT'   )  !IdentifierPart;
BoolToken   = ( 'bool'  / 'Bool'  / 'BOOL'  )  !IdentifierPart;
IntToken    = ( 'int'   / 'Int'   / 'INT'   )  !IdentifierPart;
FloatToken  = ( 'float' / 'Float' / 'FLOAT' )  !IdentifierPart;
IfToken     = ( 'if'    / 'If'    / 'IF'    )  !IdentifierPart;
ThenToken   = ( 'then'  / 'Then'  / 'THEN'  )  !IdentifierPart;
ElseToken   = ( 'else'  / 'Else'  / 'ELSE'  )  !IdentifierPart;
LetToken    = ( 'let'   / 'Let'   / 'LET'   )  !IdentifierPart;
RecToken    = ( 'rec'   / 'Rec'   / 'REC'   )  !IdentifierPart;
InToken     = ( 'in'    / 'In'    / 'IN'    )  !IdentifierPart;
EndToken    = ( 'end'   / 'End'   / 'END'   )  !IdentifierPart;


// 3. statements

ParenExp
  = { '(' !'*' _? ExpStmt@ _? ')' #block }
  ;

ParenStmt
  = ExpStmt*
  ;  

SimpleExpStmt
  = ParenExp / Number / Identifier / BoolToken / IntToken / FloatToken
  ;

Exp
  = ExpStmt@ _? EOS 
  / ExpStmt@
  ;

ExpStmt
  = IfStmt / LetStmt / TupleStmt / SimpleExpStmt (_ SimpleExpStmt)+ 
  / ArrayStmt / Elems@ / SimpleExpStmt
  ;


Term
  = Number !(_ SimpleExpStmt) / Identifier !(_ SimpleExpStmt) / ParenExp
  ;

NotExp
  = { NotToken _? Term #not }
  / Term
  ;

SignExp
  = { '-' !'.' _? NotExp@ #minus }
  / { '+' !'.' _? NotExp@ #plus }
  / NotExp
  ;

MulDiv
  = SignExp {@ _? MulDivOperator _? SignExp@ }*
  ;

MulDivOperator
  = '*.' #mul 
  / '/.' #div
  ;

AddSub
  = MulDiv {@ _? AddSubOperator _? MulDiv@ }*
  ;

AddSubOperator
  = '+' '.'? #add 
  / '-' '.'? #sub
  ;

Relation
  = AddSub {@ _? RelationOperator _? AddSub@ }*
  ;

RelationOperator
  = '<>' #noteq 
  / '=' #eq 
  / '<=' #lte 
  / '<' #lt 
  / '>=' #gte 
  / '>' #gt 
  ;

Elems
  = Relation {@ _? ',' _? Relation@ #elems }* 
  ;


// Pat
//   = { Identifier ( _? ',' _? Identifier )+ #patterns }
//   / Identifier
//   ;


TupleStmt
  = { '(' _? Relation@ ( _? ',' _? Relation@ )+ _? ')' #tuple }
  ;

  
IfStmt
  = { IfToken _ ExpStmt@ _ ThenStmt@ _ ElseStmt@ #if }
  / { IfToken _ ExpStmt@ _ ThenStmt@ #if }
  / { IfToken _ ExpStmt@ _ ElseStmt@ #if }
  ;

ThenStmt
  = { ThenToken _ ExpStmt@ #thenblock }
  ;

ElseStmt
  = { ElseToken _ ExpStmt@ #elseblock }
  ;

  
LetStmt
  = { LetToken _ TupleStmt@ _? '=' _? ExpStmt@ (_ InStmt@)? #lettuple }
  / { LetToken _ Identifier@ _? '=' _? ExpStmt@ (_ InStmt@)? #let }
  / { LetToken _ RecToken? _? FunDef@ _? '=' _? ExpStmt@ (_ InStmt@)? #function }
  / { LetToken _ ExpStmt@ _? ( _? ';' _? ExpStmt@ )+ #array }
  ;

// For supplementary function / local variable
InStmt
  = { InToken _ ExpStmt@ _ EndToken #inblock }
  ;

  
FunDef
  = FunName@ _ TupleStmt@ 
  / { FunName@ ( _ FunParam@ )* #params }
  ;

FunName
  = { Identifier #funcname }
  ;

FunParam
  = { Identifier #param }
  ;

ArrayStmt
  = ArrayCreate / PutStmt / ReadStmt 
  ;

// 'Array.create' array_size initializer ;;  
ArrayCreate
  = { 'Array.create' _? SimpleExpStmt@ _? SimpleExpStmt@ #arraycreate }
  ;

// array_name.(index) <- element ;;  
PutStmt
  = { SimpleExpStmt _? '.' _? '(' _? ExpStmt@ _? ')' _? '<-' _? ExpStmt@ #arrayput }
  ;

ReadStmt
  = { SimpleExpStmt _? '.' _? '(' _? ExpStmt@ _? ')' #arrayread }
  ;

Program
  = SourceElements?
  ;

SourceElements
  = { Exp@ ( _? Exp@ )* #toplevel }
  ;

TopLevel
  = _? Program _? 
  ;

File
  = _? Program _?
  ;
  
// 
// Eijiro, Sumii. "速攻MinCamlコンパイラ概説" http://esumii.github.io/min-caml/ (July 2014)
// 
