// PEG4d Konoha4e Grammar
// ======================

export
	= TopLevel
	/ Statement
	/ Expression
	/ Literal

File
	= { (@TopLevel)* #Source }

Chunk
	= TopLevel
	/ Expression
	/ Statement
	/ Type

_
	= (S / BLOCKCOMMENT / LINECOMMENT)*

S
	= [ \n\r\t\u000B\u000C]
	
BLOCKCOMMENT
	= '/*' (!'*/' .)* '*/'
	
LINECOMMENT
	= '//' (!'\n' .)*

EOL
	= ('\r'? '\n' / !.)
EOT	
	= !.

DIGIT
	= [0-9]

W
	= [a-zA-Z0-9_]

NAME
	= !DIGIT  W+

// Token
// =====

"assert"       = 'assert' !W _
"break"        = 'break' !W _
"case"         = 'case' !W _
"catch"        = 'catch' !W _
"class"        = 'class' !W _
"continue"     = 'continue' !W _
"default"      = 'default' !W _
"do"           = 'do' !W _
"else"         = 'else' !W _
"enum"         = 'enum' !W _
"extends"      = 'extends' !W _
"finally"      = 'finally' !W _
"final"        = 'final' !W _
"for"          = 'for' !W _
"if"           = 'if' !W _
"implements"   = 'implements' !W _
"import"       = 'import' !W _
"interface"    = 'interface' !W _
"instanceof"   = 'instanceof' !W _
"new"          = 'new' !W _
"package"      = 'package' !W _
"return"       = 'return' !W _
"static"       = 'static' !W _
"super"        = 'super' !W _
"switch"       = 'switch' !W _
"synchronized" = 'synchronized' !W _
"this"         = 'this' !W _
"throws"       = 'throws' !W _
"throw"        = 'throw' !W _
"try"          = 'try' !W _
"void"         = 'void' !W _
"while"        = 'while' !W _

"@"     = '@' _
"&"     = '&' ![&=] _
"&&"    = '&&' _
"&="    = '&=' _
"!"     = '!' !'=' _
">>>"   = '>>>' !'=' _
">>>="  = '>>>=' _
":"     = ':' _
","     = ',' _
"--"    = '--' _
"/"     = '/' !'=' _
"/="    = '/=' _
"."     = '.' _
"..."   = '...' _
"="     = '=' !'=' _
"=="    = '==' _
">="    = '>=' _
">"     = '>' ![=->] _
"^"     = '^' !'=' _
"^="    = '^=' _
"++"    = '++' _
"["     = '[' _
"<="    = '<=' _
"("     = '(' _
"<"     = '<' ![<-=] _
"{"     = '{' _
"-"     = '-' !'-' _
"-="    = '-=' _
"%"     = '%' !'=' _
"%="    = '%=' _
"!="    = '!=' _
"|"     = '|' ![=|] _
"|="    = '|=' _
"||"    = '||' _
"+"     = '+' ![+=] _
"+="    = '+=' _
"?"     = '?' _
"]"     = ']' _
")"     = ')' _
"}"     = '}' _
";"     = ';' _
"<<"    = '<<' !'=' _
"<<="   = '<<=' _
">>"    = '>>' ![=->] _
">>="   = '>>=' _
"*"     = '*' !'=' _
"*="    = '*=' _
"~"     = '~' _

// Block, Statement
//===================

TopLevel
	= Statement

Block
	= { "{" (@(Statement))* "}" #Block }

Statement
	= Block
	/ { "if"     "(" @Expression ")" @Statement ("else" @Statement)? #If }
	/ { "switch" "(" @Expression ")" @Statement #Switch }
	/ { "while"  "(" @Expression ")" @Statement #While }
	/ { "do" @Statement "while" "(" @Expression ")" #DoWhile } ";"
	/ { "for" "(" (@Expression)? ";" (@Expression^) ";" (@Expression)? ")" @Statement #For }
//	/ { "for" "(" @Declaration (@Expression)? ";" (@Expression)? ")" @Statement #For }
	/ { "goto" Name #Goto } ";"
	/ { "continue" #Continue } ";" 
	/ { "break" #Break } ";" 
	/ { "return" (@Expression)? #Return } ";" 
	/ { "case" @ConstantExpression ":" @Statement #SwitchCase }
	/ { "default" ":" @Statement #SwitchDefault }
	/ { @Name ":" @Statement #LabelBlock }
	/ Expression ";"
	/ { #Empty } ";"


//Expression
//==========

Expression
	= AssignmentExpression

AssignmentExpression
	= { @UnaryExpression AddAssignmentOperator @AssignmentExpression }
	/ ConditionalExpression

AddAssignmentOperator
	= "="        #Assign
	/ "*="       #AssignMul
	/ "/="       #AssignDiv
	/ "%="       #AssignMod
	/ "+="       #AssignAdd
	/ "-="       #AssignSub
	/ "<<="      #AssignLeftShift
	/ ">>="      #AssignRightShift
	/ "&="       #AssignBitwiseAnd
	/ "^="       #AssignBitwiseXOr 
	/ "|="       #AssignBitwiseOr
	
AddEqualityOperator
	= "==" #Equals / "!=" #NotEquals
	
AddRelationalOperator
	"<=" #LessThanEquals / ">=" #GreaterThanEquals / "<" #LessThan / ">" #GreaterThan

AddShiftOperator
	= "<<" #LeftShift / ">>" #RightShift
	
AddAdditiveOperator
	= "+" #Add / "-" #Sub

AddMultiplicativeOperator
	= "*" #Mul / "/" #Div / "%" #Mod


ConstantExpression
	= ConditionalExpression
	
ConditionalExpression
	= LogicalORExpression {@ "?"  @Expression ":" @LogicalORExpression #Conditional }*

LogicalORExpression
	= LogicalANDExpression {@ "||" @LogicalANDExpression #Or }*

LogicalANDExpression
	= InclusiveORExpression {@ "&&" @InclusiveORExpression #And }*

InclusiveORExpression
	= ExclusiveORExpression {@ "|" @ExclusiveORExpression #BitwiseOr }*

ExclusiveORExpression
	= ANDExpression {@ "^" @ANDExpression #BitwiseXor }*

ANDExpression
	= EqualityExpression {@ "&" @EqualityExpression #BitwiseAnd }*

EqualityExpression
	= RelationalExpression {@ AddEqualityOperator @RelationalExpression }*

RelationalExpression
	= ShiftExpression {@ AddRelationalOperator @ShiftExpression }*

ShiftExpression
	= AdditiveExpression {@ AddShiftOperator @AdditiveExpression }*

AdditiveExpression
	= MultiplicativeExpression {@ AddAdditiveOperator @MultiplicativeExpression }*
	
MultiplicativeExpression
	= CastExpression {@ AddMultiplicativeOperator @CastExpression }*

CastExpression
	= { "(" @Type ")" @CastExpression #Cast }
	/ UnaryExpression


UnaryExpression
	= PostfixExpression
	/ { "++"   @UnaryExpression #PrefixInc }
	/ { "--"   @UnaryExpression #PrefixDec }
	/ { "+"    @CastExpression  #Plus }
	/ { "-"    @CastExpression  #Minus }
	/ { "~"    @CastExpression  #Compl }
	/ { "!"    @CastExpression  #Not }
//	/ { "&"    @CastExpression  #Address }
//	/ { "*"    @CastExpression  #Star }
//	/ { "sizeof"  ( @UnaryExpression / "(" @Type ")" ) #SizeOf }


PostfixExpression
	= PrimaryExpression {@ (AddFunctionCall / AddIndex  / "." @Name #Field / "++" #Inc / "--" #Dec) }*

AddFunctionCall
	= "(" @{ AddArgumentExpressionList? #List} ")" #Apply

AddArgumentExpressionList
	= (@AssignmentExpression ("," @AssignmentExpression)*)

AddIndex
	= "[" @Expression "]" #Index

PrimaryExpression
	= "(" Expression ")"
	/ Literal
	/ Name

Name
	= { NAME #Name }

// Type
// =======

Type
	= { NAME #Type }


// Literal
// =======

Literal
	= Float
	/ Integer
	/ String  / SingleString
	/ { 'null'  !W #Null } _
	/ { 'true'  !W #True  } _
	/ { 'false' !W #False } _

Float
	= { ( DECIMAL_FLOAT / HEX_FLOAT )  #Float } FLOAT_SUFFIX? _

DECIMAL_FLOAT
	= FRACTION EXPONENT?
	/ DIGIT+ EXPONENT

FRACTION
	= DIGIT* '.' DIGIT+
	/ DIGIT+ '.'

EXPONENT
	= [eE] [+\-]? DIGIT+

HEX_FLOAT
	= HEX_PREFIX HEX_FRACTION BINARY_EXPONENT?
	/ HEX_PREFIX HEX+ BINARY_EXPONENT

HEX_PREFIX
	= '0' [xX]

HEX_FRACTION
	= HEX* '.' HEX+
	/ HEX+ '.'

BINARY_EXPONENT
	= [pP] [+\-]? DIGIT+

FLOAT_SUFFIX
	= [flFL]

Integer
	= { ( DECIMAL / HEXICAL / OCTAL ) #Integer } INT_SUFFIX? _

DECIMAL
	= [1-9] DIGIT*

HEXICAL
	= HEX_PREFIX HEX+

OCTAL
	= '0' [0-7]*

INT_SUFFIX
	= [uU] LONG_SUFFIX?
	/ LONG_SUFFIX [uU]?

LONG_SUFFIX
	= 'll'
	/ 'LL'
	/ [lL]

String
	=  '"' { STRING_CONTENT* #String } '"' _

SingleString
	= "'" { CHAR_CONTENT* #String } "'" _

STRING_CONTENT
	= ESCAPE
	/ ![\"\n\\] .


CHAR_CONTENT
	= ESCAPE
	/ !['\n\\] .

ESCAPE
	= SIMPLE_ESCAPE
	/ UNICODE_ESCAPE

SIMPLE_ESCAPE
	= '\\' ['\"\\abfnrtv]
		
UNICODE_ESCAPE
	= '\\u' HEX HEX HEX HEX




